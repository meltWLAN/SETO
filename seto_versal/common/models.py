#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Common models for SETO-Versal
"""

import uuid
from dataclasses import dataclass, field
from typing import Optional, Dict, Any
from datetime import datetime

from seto_versal.common.constants import SignalType, OrderType

@dataclass
class Signal:
    """
    Trading signal model
    
    Represents a trading signal generated by a strategy
    """
    symbol: str
    signal_type: SignalType
    price: float
    quantity: int = 1
    order_type: OrderType = OrderType.MARKET
    confidence: float = 0.5
    target_price: Optional[float] = None
    stop_loss_price: Optional[float] = None
    reason: str = ""
    metadata: Dict[str, Any] = field(default_factory=dict)
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = field(default_factory=datetime.now)
    
    def __post_init__(self):
        """Convert string type values to proper enums if needed"""
        if isinstance(self.signal_type, str):
            self.signal_type = SignalType(self.signal_type)
        
        if isinstance(self.order_type, str):
            self.order_type = OrderType(self.order_type)
            
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary"""
        return {
            'id': self.id,
            'symbol': self.symbol,
            'signal_type': self.signal_type.value,
            'price': self.price,
            'quantity': self.quantity,
            'order_type': self.order_type.value,
            'confidence': self.confidence,
            'target_price': self.target_price,
            'stop_loss_price': self.stop_loss_price,
            'reason': self.reason,
            'metadata': self.metadata,
            'timestamp': self.timestamp.isoformat()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Signal':
        """Create from dictionary"""
        signal = cls(
            symbol=data['symbol'],
            signal_type=data['signal_type'],
            price=data['price'],
            quantity=data.get('quantity', 1),
            order_type=data.get('order_type', OrderType.MARKET),
            confidence=data.get('confidence', 0.5),
            target_price=data.get('target_price'),
            stop_loss_price=data.get('stop_loss_price'),
            reason=data.get('reason', ''),
            metadata=data.get('metadata', {}),
        )
        
        # Set additional fields
        if 'id' in data:
            signal.id = data['id']
            
        if 'timestamp' in data:
            if isinstance(data['timestamp'], str):
                signal.timestamp = datetime.fromisoformat(data['timestamp'])
            else:
                signal.timestamp = data['timestamp']
        
        return signal 